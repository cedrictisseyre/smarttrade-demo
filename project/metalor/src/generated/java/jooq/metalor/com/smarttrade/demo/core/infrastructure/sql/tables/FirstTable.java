/*
 * This file is generated by jOOQ.
 */
package com.smarttrade.demo.core.infrastructure.sql.tables;


import com.smarttrade.demo.core.infrastructure.sql.Metalor;
import com.smarttrade.demo.core.infrastructure.sql.tables.records.FirstTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FirstTable extends TableImpl<FirstTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metalor.first_table</code>
     */
    public static final FirstTable FIRST_TABLE = new FirstTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FirstTableRecord> getRecordType() {
        return FirstTableRecord.class;
    }

    /**
     * The column <code>metalor.first_table.id</code>.
     */
    public final TableField<FirstTableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>metalor.first_table.name</code>.
     */
    public final TableField<FirstTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    private FirstTable(Name alias, Table<FirstTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private FirstTable(Name alias, Table<FirstTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>metalor.first_table</code> table reference
     */
    public FirstTable(String alias) {
        this(DSL.name(alias), FIRST_TABLE);
    }

    /**
     * Create an aliased <code>metalor.first_table</code> table reference
     */
    public FirstTable(Name alias) {
        this(alias, FIRST_TABLE);
    }

    /**
     * Create a <code>metalor.first_table</code> table reference
     */
    public FirstTable() {
        this(DSL.name("first_table"), null);
    }

    public <O extends Record> FirstTable(Table<O> child, ForeignKey<O, FirstTableRecord> key) {
        super(child, key, FIRST_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Metalor.METALOR;
    }

    @Override
    public FirstTable as(String alias) {
        return new FirstTable(DSL.name(alias), this);
    }

    @Override
    public FirstTable as(Name alias) {
        return new FirstTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FirstTable rename(String name) {
        return new FirstTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FirstTable rename(Name name) {
        return new FirstTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
