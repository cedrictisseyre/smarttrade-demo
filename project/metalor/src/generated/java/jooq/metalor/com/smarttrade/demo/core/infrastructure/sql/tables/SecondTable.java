/*
 * This file is generated by jOOQ.
 */
package com.smarttrade.demo.core.infrastructure.sql.tables;


import com.smarttrade.demo.core.infrastructure.sql.Metalor;
import com.smarttrade.demo.core.infrastructure.sql.tables.records.SecondTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecondTable extends TableImpl<SecondTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>metalor.second_table</code>
     */
    public static final SecondTable SECOND_TABLE = new SecondTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecondTableRecord> getRecordType() {
        return SecondTableRecord.class;
    }

    /**
     * The column <code>metalor.second_table.id</code>.
     */
    public final TableField<SecondTableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>metalor.second_table.name</code>.
     */
    public final TableField<SecondTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    private SecondTable(Name alias, Table<SecondTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecondTable(Name alias, Table<SecondTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>metalor.second_table</code> table reference
     */
    public SecondTable(String alias) {
        this(DSL.name(alias), SECOND_TABLE);
    }

    /**
     * Create an aliased <code>metalor.second_table</code> table reference
     */
    public SecondTable(Name alias) {
        this(alias, SECOND_TABLE);
    }

    /**
     * Create a <code>metalor.second_table</code> table reference
     */
    public SecondTable() {
        this(DSL.name("second_table"), null);
    }

    public <O extends Record> SecondTable(Table<O> child, ForeignKey<O, SecondTableRecord> key) {
        super(child, key, SECOND_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Metalor.METALOR;
    }

    @Override
    public SecondTable as(String alias) {
        return new SecondTable(DSL.name(alias), this);
    }

    @Override
    public SecondTable as(Name alias) {
        return new SecondTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecondTable rename(String name) {
        return new SecondTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecondTable rename(Name name) {
        return new SecondTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
