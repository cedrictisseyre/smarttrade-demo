import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'base'
    id 'org.springframework.boot' version '2.7.5' apply false
}

group 'com.smarttrade.demo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

allprojects {
    group 'com.smarttrade.demo'
    version '0.0.1-SNAPSHOT'

    apply plugin: 'java'

    tasks.withType(JavaCompile) {
        it.options.compilerArgs.add("--enable-preview")
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
    }

    ext.failedTests = []

    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    gradle.buildFinished {
        if (!failedTests.empty) {
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }
}

subprojects {
    sourceCompatibility = 17
    targetCompatibility = 17

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
            mavenBom 'org.junit:junit-bom:5.9.1'
        }

        dependencies {
            dependency group: 'io.opentracing', name: 'opentracing-api', version: "0.33.0"
            dependency group: 'io.opentracing', name: 'opentracing-util', version: "0.33.0"
            dependency 'com.datadoghq:dd-trace-api:0.113.0'

            dependency 'org.decimal4j:decimal4j:1.0.3'

            dependencySet(group: 'io.github.resilience4j', version: '1.7.1') {
                entry 'resilience4j-spring-boot2'
                entry 'resilience4j-micrometer'
            }

            dependency 'io.vavr:vavr:0.10.4'
            dependency 'io.vavr:vavr-gson:0.10.2'

            dependency 'io.micrometer:micrometer-core:1.9.5'

            dependencySet(group: 'com.google.flogger', version: '0.7.4') {
                entry 'flogger'
                entry 'flogger-system-backend'
                entry 'flogger-slf4j-backend'
            }

            dependencySet(group: 'ch.qos.logback', version: '1.2.11') {
                entry 'logback-core'
                entry 'logback-classic'
            }
            dependency 'net.logstash.logback:logstash-logback-encoder:7.2'

            dependency 'org.springdoc:springdoc-openapi-ui:1.6.9'

            dependency 'org.jooq:jooq:3.17.4'
            dependency 'org.postgresql:postgresql:42.5.0'

            dependency 'org.apache.commons:commons-math3:3.6.1'

            dependency 'org.springdoc:springdoc-openapi-ui:1.6.9'

            // TESTS
            dependency 'org.assertj:assertj-core:3.23.1'
            dependency "org.assertj:assertj-vavr:0.4.2"
            dependency 'com.approvaltests:approvaltests:18.5.0'
            dependency 'org.mockito:mockito-core:4.8.1'
            dependency 'org.mockito:mockito-inline:4.8.1'
            dependency 'org.projectlombok:lombok:1.18.24'

            dependency 'org.testcontainers:postgresql:1.17.2'
            dependency 'org.testcontainers:testcontainers:1.17.5'
            dependency 'org.testcontainers:junit-jupiter:1.17.2'
        }
    }

    task testExcludingIntegrated(type: Test) {
        group "verification"
        useJUnitPlatform { excludeTags "IntegratedTest" }

        jvmArgs += ["--enable-preview", "--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED"]
    }
}

test {
    useJUnitPlatform()
}
